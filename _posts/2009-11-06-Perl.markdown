---
layout: post 
title: Perl
---

==Auto Install perl script (Linux)==
Needs to be mofidied for the exact Perl version
<pre>
wget wget http://www.perl.com/CPAN/src/perl-5.10.0.tar.gz
tar xzf perl-5.10.0.tar.gz
cd perl-5.10.1
./Configure -des -Dprefix=/
make test
sudo make install
</pre>
===Troubleshooting===
Error:
<pre>
I can't find make or gmake, and my life depends on it.
Go find a public domain implementation or fix your PATH setting!
</pre>
Either make is not in your $PATH or the build utilites are not installed. Go to [[Debian or Ubuntu Vs CentOS]] and look at the top line to install.
==Arguments / Parameters==
The @ARGV array stores parameters.

Display the 2nd parameter:<pre>$ARGV[1]</pre>
Display the number of parameters passed:<pre>@ARGV</pre>

==Subs==
<pre>
sub transform
{
say "Frist variable $_[0]\
Second variable $_[1]";
}

&transform;   #call sub
&transform(arg1, arg2);   #call sub with params
</pre>
==Loops==
===For loops (indices)===
Indices should be avoided in Perl, as better alternatives exist
<pre>
my $pagecount = 20;
my @onetopagecount = (1 .. $pagecount);
for my $i (@onetopagecount) { &printpage($i,$pagecount); }
</pre>
===Foreach loops===
<pre>
my $pagecount = 20;
my @onetopagecount = (1 .. $pagecount);
foreach $page (@onetopagecount) { &printpage($i,$pagecount); }
</pre>
===While loops===
While there is standard input, read into $line variable
<ref>http://pages.cs.wisc.edu/~hasti/cs368/Perl/notes/lec02.html</ref>
<pre>
  # While there is standard input, read into $line variable
        while $line ( <STDIN> )  
        {                            
           chomp $line;
           print $line;             
           
        } 
</pre>

==Transforming text==
*These can be used within a string: <tt>"\\Lall text is lowercase"</tt> Or just before a variable: <tt>\\U$varisuppercase</tt>
*Set first character to be uppercase: <tt>$firstinuppercase = ucfirst($lowercasetext);</tt><br>

==Numeric comparison==
{| {{table}}
| ==||Equal to
|-
| !=||Not Equal to
|-
| >||Greater than
|-
| <||Less than
|-
| >=||Greater than or Equal to
|-
| <=||Less than or Equal to
|}
==String comparison==
{| {{table}}
| eq||equal
|-
| ne||not equal
|-
| =~||contains
|-
| !~||does not contain
|-
| 
|}

===Example===
Cycle through the current folder, displaying all files except those that contain "dirtest88" and excluding the "." and ".." folders.
<pre>
my $dirname = ".";
opendir(DIR, $dirname) or die "can't opendir $dirname: $!";
while (defined($file = readdir(DIR))) {
    # do something with "$dirname/$file"
    if ($file ne "." && $file !~ /dirtest88/ && $file ne "..") {
    say "There is $dirname/$file";
    }
}
closedir(DIR);
</pre>

==Extracting text==
The <tt>split()</tt> function gives [http://www.gnu.org/manual/gawk/html_node/Cut-Program.html cut] functionality to Perl.
<br>Usage: <tt>split('delimeter',input,max_no_of_fields);</tt>
===Example===
Cycle through the output of a find command and output the second dir and put them into the array <tt>@dirnames</tt>:
<pre>
open(TIMELINE_PIPE,"find www/ -type f -name *.jp* -mtime 6|");
my $i=0;
while (<TIMELINE_PIPE>) {
    chomp;
    my @dir1 = split('/',$_,3);
    my $dir2 = $name1[1];
    print "$dir2\
";
}
</pre>
==Arrays==
<pre>
my %splitfilenames (1, "allpics.aa",
            2, "allpics.ab",
            3, "allpics.ac",
            4, "allpics.ad",
            5, "allpics.ae");
</pre>
<tt>$splitfilenames{2}</tt> would then return "allpics.ab"
==References==
<references />
[[Category:Linux]]
